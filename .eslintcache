[{"/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/index.js":"1","/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/App.js":"2","/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/components/ShowAppt.js":"3","/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/containers/ApptList.js":"4","/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/containers/ApptContainer.js":"5"},{"size":152,"mtime":1608761305486,"results":"6","hashOfConfig":"7"},{"size":2094,"mtime":1608770019416,"results":"8","hashOfConfig":"7"},{"size":1546,"mtime":1608770810588,"results":"9","hashOfConfig":"7"},{"size":1281,"mtime":1608770062753,"results":"10","hashOfConfig":"7"},{"size":679,"mtime":1608769327589,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"jlmb83",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"14"},"/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/index.js",[],["27","28"],"/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/App.js",["29"],"import react, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ApptList from'./containers/ApptList';\n\nimport './App.css';\n\nfunction App() {\n  // consider setting this from ComponentDidMount to get closer to API pull\n  const [appts, setAppts] = useState([\n    {\n      time: \"9:00 - 10:00a\",\n      appts: [\n        {\n          client: \"Avni Submaranian\",\n          touchpoint: 3,\n          task: \"Call\",\n          notes: \"Inbound NY\",\n          id: uuidv4() \n        },\n        {\n          client: \"Malik Simpson\",\n          touchpoint: 4,\n          task: \"Manual task\",\n          notes: \"Rekindling ancient embers\",\n          id: uuidv4() \n        },\n        {\n          client: \"Javroni F. Myers\",\n          touchpoint: 3,\n          task: \"Call\",\n          notes: \"Shaming bottom-feeders\",\n          id: uuidv4() \n        },\n      ]\n    },\n    {\n      time: \"11:15a - 12:00p\",\n      appts: [\n        {\n          client: \"Yvette Mok\",\n          touchpoint: 1,\n          task: \"LinkedIn message\",\n          notes: \"Ignore and solicit on\",\n          id: uuidv4() \n        },\n        {\n          client: \"Xavier St. D'Augustine\",\n          touchpoint: 1,\n          task: \"Manual task\",\n          notes: \"Ignore and solicit on\",\n          id: uuidv4() \n        },\n      ]\n    },\n  ])\n\n  const handleDismiss = (e) => {\n    e.stopPropagation();\n    console.log(e.target.id)\n    // find where appt begins (and therefore the time array ends)\n    let apptStart = e.target.id.indexOf(\"appt\");\n    // parse individual values for target\n    let timeValue = parseInt(e.target.id.substring(4, apptStart));\n    let apptValue = parseInt(e.target.id.substring(apptStart+4, e.target.id.length));\n\n    // dupe array\n    let apptsToChange = [...appts];\n    // target array based on timeValue\n    apptsToChange[timeValue].appts.splice(apptValue, 1);\n    //update state\n    setAppts(apptsToChange);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* for each appt, render time and list. */}\n      <ApptList appts={appts} handleDismiss={handleDismiss} />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/components/ShowAppt.js",["30","31"],"import react from 'react';\n\nimport './ShowAppt.css';\n\nfunction ShowAppt(props) {\n  const getKeyword = () => {\n    if (props.appt.task === \"Call\") {\n      return \"call\";\n    } else {\n      return \"reach out to\";\n    }\n  }\n\n  const getIcon = () => {\n    switch(props.appt.task) {\n      case \"Call\":\n        return <i className=\"fas fa-phone-alt\"></i>;\n      case \"Manual task\":\n        return <i className=\"fab fa-linkedin manualLI\"></i>;\n      case \"LinkedIn message\":\n        return <i className=\"fab fa-linkedin liTail\"></i>;\n    }\n  }\n\n  return (\n    <div className={\"apptShow \" + (props.open ? \"openAppt\" : \"\")} style={props.style} onClick={props.toggleOpen}>\n      <div className=\"icon\">\n        {getIcon()}\n      </div>\n      {!props.open && \n        <div className=\"touchDetail\">\n          <h3>Touch {props.appt.touchpoint} | {props.appt.notes}</h3>\n          <h4>{props.appt.task} {props.appt.task === \"Manual task\" && <span className=\"taskJoiner\">with</span>} {props.appt.client}</h4>\n        </div>\n      }\n      {props.open && \n        <div className=\"touchQuestion\">\n          <h4>Did you {getKeyword()} {props.appt.client}?</h4>\n        </div>\n      }\n      <div className=\"respBtns\">\n        <div className=\"deny\"><i className=\"fas fa-times\"></i></div>\n        <div className=\"confirm\" id={props.id} onClick={props.handleDismiss}><i className=\"fas fa-check\" id={props.id}></i></div>\n      </div>\n      <div className=\"pushOver\">\n        <i className=\"fas fa-chevron-right\"></i>\n      </div>\n    </div>\n  )\n}\n\nexport default ShowAppt;","/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/containers/ApptList.js",["32"],"import react from 'react';\n\nimport ApptContainer from './ApptContainer';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nfunction ApptList(props) {\n  function getStyle(index, length) {\n    if (index === 0) {\n      return {\n        borderRadius: \"10px 10px 0px 0px\",\n      }\n    } else if (index === length - 1) {\n      return {\n        borderRadius: \"0px 0px 10px 10px\",\n      }\n    } else {\n      return {\n        borderRadius: \"0px\",\n      }\n    }\n  }\n\n  const timeMap = props.appts.map((timeSlot, timeIndex) => {\n    return (\n      <div className=\"timeContainer\" key={timeIndex}>\n        <h2>{timeSlot.time}</h2>\n        <TransitionGroup>\n          {timeSlot.appts.map((appt, apptIndex) => {\n            return (\n              <CSSTransition\n                timeout={350}\n                classNames=\"appt\"\n                key={appt.id}\n                unmountOnExit>\n                <ApptContainer appt={appt} id={`time${timeIndex}appt${apptIndex}`} style={getStyle(apptIndex, timeSlot.appts.length)} handleDismiss={props.handleDismiss} />\n              </CSSTransition>\n            )}\n          )}\n        </TransitionGroup>\n      </div>\n    )\n  })\n\n  return(\n    <div className=\"apptList\">\n        {timeMap}\n    </div>\n  )\n}\n\nexport default ApptList;","/Users/imac2/Documents/Programming/postGAtesting/striveCodeChallenge/strive-app/src/containers/ApptContainer.js",["33","34"],"import react, { useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport ShowAppt from '../components/ShowAppt';\n\nfunction ApptContainer(props) {\n  const [open, setOpen] = useState(false);\n\n  const toggleOpen = () => {\n    if (open) {\n      setOpen(false)\n    } else {\n      setOpen(true)\n    }\n  }\n\n  return (\n      <div className=\"apptContainer\">\n        <div className=\"closeDrawer\" onClick={toggleOpen}><i className=\"fas fa-chevron-left\"></i></div>\n        <ShowAppt appt={props.appt} id={props.id} style={props.style} open={open} toggleOpen={toggleOpen} handleDismiss={props.handleDismiss} />\n      </div>\n  )\n}\n\nexport default ApptContainer;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":13},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":13},{"ruleId":"43","severity":1,"message":"44","line":15,"column":5,"nodeType":"45","messageId":"46","endLine":22,"endColumn":6},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":13},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":13},{"ruleId":"39","severity":1,"message":"47","line":2,"column":10,"nodeType":"41","messageId":"42","endLine":2,"endColumn":23},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'react' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'CSSTransition' is defined but never used.","no-global-assign","no-unsafe-negation"]